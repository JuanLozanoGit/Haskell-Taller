{-
Taller: Resolviendo un Problema de Negocio con Haskell
# Objetivo: Implementar un sistema de gestión de inventario para una tienda.
# Especificaciones:
# - Utilizar una lista de tuplas (nombre, precio, cantidad) para representar el inventario.
# - Implementar funciones para agregar, actualizar, eliminar y consultar productos.
# - Incluir funciones adicionales para buscar productos y aplicar descuentos.
-}
-- Agregar un nuevo producto al inventario
-- Toma el inventario actual, el nombre del nuevo producto, su precio y cantidad,
-- y devuelve un nuevo inventario con el producto añadido.
import Text.Read (readMaybe)

-- Definir el tipo de datos para el inventario
type Inventory = [(String, Double, Int)]

-- Función para agregar un nuevo producto al inventario
addProduct :: Inventory -> String -> Double -> Int -> Inventory
addProduct inventory name price quantity = (name, price, quantity) : inventory

-- Función para actualizar la cantidad de un producto existente
updateQuantity :: Inventory -> String -> Int -> Inventory
updateQuantity inventory name newQuantity =
  map (\(n, p, q) -> if n == name then (n, p, newQuantity) else (n, p, q)) inventory

-- Función para eliminar un producto del inventario
removeProduct :: Inventory -> String -> Inventory
removeProduct inventory name = filter (\(n, _, _) -> n /= name) inventory

-- Buscar un producto por su nombre
findProduct :: Inventory -> String -> Maybe (Double, Int)
findProduct [] _ = Nothing
findProduct ((n, p, q):xs) name
    | n == name = Just (p, q)
    | otherwise = findProduct xs name

-- Aplicar descuento a todos los productos
applyDiscount :: Inventory -> Double -> Inventory
applyDiscount inventory discount = [(n, p * (1 - discount / 100), q) | (n, p, q) <- inventory]

-- Resumen del inventario: total de productos y valor total
inventorySummary :: Inventory -> (Int, Double)
inventorySummary inventory = (totalQuantity, totalValue)
  where
    totalQuantity = sum [q | (_, _, q) <- inventory]
    totalValue = sum [p * fromIntegral q | (_, p, q) <- inventory]

-- Función principal para manejar el flujo interactivo
main :: IO ()
main = do
    let initialInventory = [] :: Inventory  -- Inventario inicial vacío.
    putStrLn "Bienvenido al sistema de gestión de inventario"
    loop initialInventory

-- Bucle para mantener la interacción con el usuario
loop :: Inventory -> IO ()
loop inventory = do
    putStrLn "\nOpciones:"
    putStrLn "1. Agregar producto"
    putStrLn "2. Actualizar cantidad de producto"
    putStrLn "3. Eliminar producto"
    putStrLn "4. Consultar inventario"
    putStrLn "5. Buscar producto"
    putStrLn "6. Aplicar descuento"
    putStrLn "7. Salir"
    putStr "Seleccione una opción: "
    option <- getLine
    case option of
        "1" -> do
            newInventory <- addProductAction inventory
            loop newInventory
        "2" -> do
            newInventory <- updateQuantityAction inventory
            loop newInventory
        "3" -> do
            newInventory <- removeProductAction inventory
            loop newInventory
        "4" -> do
            consultInventoryAction inventory
            loop inventory
        "5" -> do
            searchProductAction inventory
            loop inventory
        "6" -> do
            newInventory <- applyDiscountAction inventory
            loop newInventory
        "7" -> putStrLn "Saliendo..."  -- Salir
        _   -> do
            putStrLn "Opción no válida, intente nuevamente."
            loop inventory

-- Acción para agregar un producto
addProductAction :: Inventory -> IO Inventory
addProductAction inventory = do
    putStrLn "\n--- Agregar Producto ---"
    putStr "Ingrese el nombre del producto: "
    name <- getLine
    putStr "Ingrese el precio del producto (en números): "
    price <- readInput "Precio"
    putStr "Ingrese la cantidad del producto: "
    quantity <- readInput "Cantidad"
    let newInventory = addProduct inventory name price quantity
    putStrLn $ "Producto '" ++ name ++ "' agregado exitosamente."
    return newInventory

-- Acción para actualizar la cantidad de un producto
updateQuantityAction :: Inventory -> IO Inventory
updateQuantityAction inventory = do
    putStrLn "\n--- Actualizar Cantidad de Producto ---"
    putStr "Ingrese el nombre del producto a actualizar: "
    name <- getLine
    maybeProduct <- case findProduct inventory name of
        Just (_,_) -> return $ Just ()
        Nothing -> do
            putStrLn "Producto no encontrado en el inventario."
            return Nothing
    case maybeProduct of
        Just _ -> do
            putStr "Ingrese la nueva cantidad: "
            quantity <- readInput "Cantidad"
            let newInventory = updateQuantity inventory name quantity
            putStrLn $ "Cantidad del producto '" ++ name ++ "' actualizada a " ++ show quantity
            return newInventory
        Nothing -> return inventory

-- Acción para eliminar un producto
removeProductAction :: Inventory -> IO Inventory
removeProductAction inventory = do
    putStrLn "\n--- Eliminar Producto ---"
    putStr "Ingrese el nombre del producto a eliminar: "
    name <- getLine
    let newInventory = removeProduct inventory name
    putStrLn $ "Producto '" ++ name ++ "' eliminado exitosamente."
    return newInventory

-- Acción para consultar el inventario
consultInventoryAction :: Inventory -> IO ()
consultInventoryAction inventory = do
    putStrLn "\n--- Resumen del Inventario ---"
    let (totalQty, totalValue) = inventorySummary inventory
    putStrLn $ "Total de productos en inventario: " ++ show totalQty
    putStrLn $ "Valor total del inventario: " ++ show totalValue

-- Acción para buscar un producto
searchProductAction :: Inventory -> IO ()
searchProductAction inventory = do
    putStrLn "\n--- Buscar Producto ---"
    putStr "Ingrese el nombre del producto a buscar: "
    name <- getLine
    let result = findProduct inventory name
    case result of
        Just (price, quantity) -> putStrLn $ "Producto: '" ++ name ++ "' encontrado. Precio: " ++ show price ++ ", Cantidad: " ++ show quantity
        Nothing -> putStrLn "Producto no encontrado."

-- Acción para aplicar un descuento a todos los productos
applyDiscountAction :: Inventory -> IO Inventory
applyDiscountAction inventory = do
    putStrLn "\n--- Aplicar Descuento ---"
    putStr "Ingrese el porcentaje de descuento (ejemplo: 10 para 10%): "
    discount <- readInput "Descuento"
    let newInventory = applyDiscount inventory discount
    putStrLn $ "Descuento de " ++ show discount ++ "% aplicado a todos los productos."
    return newInventory

-- Función auxiliar para leer un número con validación
readInput :: (Read a, Show a) => String -> IO a
readInput label = do
    input <- getLine
    case readMaybe input of
        Just value -> return value
        Nothing -> do
            putStrLn $ "Entrada inválida para " ++ label ++ ". Intente de nuevo."
            readInput label
